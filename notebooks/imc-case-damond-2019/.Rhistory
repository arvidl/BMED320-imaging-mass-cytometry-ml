install.packages(c("MASS", "mgcv", "nlme", "survival"))
install.packages("haven")
install.packages("dplyr")
install.packages("rmarkdown")
install.packages("ggplot2")
install.packages("tidyverse")
install.packages("perm")
install.packages("hrbrthemes")
install.packages("viridis")
install.packages("heatmaply")
install.packages("caret")
install.packages("psych")
install.packages("lme4")
install.packages("AppliedPredictiveModeling")
install.packages("Rcmdr")
install.packages(c("mnormt", "systemfonts"))
install.packages(c("mnormt", "systemfonts"))
install.packages("mnormt")
install.packages("systemfonts")
install.packages("systemfonts")
install.packages("systemfonts")
install.packages("permubiome")
library(permubiome)
help(permubiame)
??permubiame
install.packages("systemfonts")
install.packages("freetypeharfbuzz")
install.packages("systemfonts")
install.packages("systemfonts")
install.packages("Rcmdr")
install.packages("systemfonts")
install.packages(c("processx", "RcppArmadillo"))
install.packages(c("psych", "systemfonts"))
library("Rcmdr")
install.packages(c("callr", "cowplot", "insight", "jsonlite", "MASS", "quantreg", "stringi", "systemfonts", "xfun"))
install.packages("discretize")
install.packages("arules")
help(arules)
??arules
source('~/.active-rstudio-document')
source('~/Downloads/discretize.R')
source('~/Downloads/discretize.R')
discretizeDF(iris[sample(1:nrow(iris), 5),], methods = irisDisc)
install.packages(c("backports", "gplots", "htmlTable", "insight", "knitr", "lava", "matrixStats", "openssl", "openxlsx", "quantreg", "rpart.plot", "survival", "tinytex", "withr"))
install.packages(c("car", "rmarkdown", "systemfonts", "xfun"))
remotes::install_github("mlverse/torch")
install.packages("remotes")
remotes::install_github("mlverse/torch")
library(torch)
source('~/.active-rstudio-document')
y
identical(x, as_array(y))
x <- torch_tensor(1, requires_grad = TRUE)
w <- torch_tensor(2, requires_grad = TRUE)
b <- torch_tensor(3, requires_grad = TRUE)
y <- w * x + b
y$backward()
x$grad
#> torch_tensor
#>  2
#> [ CPUFloatType{1} ]
w$grad
#> torch_tensor
#>  1
#> [ CPUFloatType{1} ]
b$grad
#> torch_tensor
#>  1
#> [ CPUFloatType{1} ]
x <- torch_randn(100, 2)
y <- 0.1 + 0.5*x[,1] - 0.7*x[,2]
w <- torch_randn(2, 1, requires_grad = TRUE)
b <- torch_zeros(1, requires_grad = TRUE)
lr <- 0.5
for (i in 1:100) {
y_hat <- torch_mm(x, w) + b
loss <- torch_mean((y - y_hat$squeeze(1))^2)
loss$backward()
with_no_grad({
w$sub_(w$grad*lr)
b$sub_(b$grad*lr)
w$grad$zero_()
b$grad$zero_()
})
}
print(w)
#> torch_tensor
#> 1e-09 *
#>  5.2672
#>  -6.7969
#> [ CPUFloatType{2,1} ]
print(b)
#> torch_tensor
#> 0.01 *
#> -9.6802
#> [ CPUFloatType{1} ]
install.packages(c("broom", "cpp11", "htmlwidgets", "quantreg", "sandwich", "seriation"))
install.packages(c("effsize", "readr", "sandwich"))
install.packages("psych")
install.packages(c("clipr", "ps", "Rcmdr", "rlang", "sp"))
install.packages(c("callr", "cli", "cpp11", "e1071", "tibble"))
install.packages("pbdZMQ")
install.packages(c("broom", "data.table", "digest", "foreach", "Formula", "iterators", "labeling", "quantreg", "RcppArmadillo", "recipes", "statmod"))
install.packages(c("rmarkdown", "torch"))
install.packages(c("insight", "SQUAREM"))
install.packages(c("digest", "lme4", "nlme", "openxlsx"))
install.packages(c("backports", "codetools", "dbplyr", "generics", "lava", "testthat", "tinytex", "xfun"))
install.packages("dbplyr")
install.packages("dbplot")
install.packages("cpp11")
reticulate::repl_python()
reticulate::source_python('~/Untitled.py')
reticulate::repl_python()
reticulate::source_python('~/Untitled.py')
library(reticulate)
wd <- '/Users/arvid/GitHub/BMED320-imaging-mass-cytometry-ml/notebooks/imc-case-damond-2019'
setwd(wd)
print(getwd())
os <- import("os")
os$listdir()
library(reticulate)
# cat $HOME/.Renviron
# RETICULATE_PYTHON="/Users/arvid/opt/anaconda3/envs/imc/bin/python"
print(Sys.which("python"))
use_python("/Users/arvid/opt/anaconda3/envs/imc/bin/python", required=TRUE)
print(Sys.which("python"))
use_condaenv(condaenv ="imc", conda = "auto", required = TRUE)
library("reticulate")
py_discover_config()
reticulate::repl_python()
